const e=(e,t)=>e.replace(t,""),t={"#":new RegExp("\\d"),"&":new RegExp("[a-zA-Z]"),"@":new RegExp("[a-zA-Z0-9]"),$:new RegExp("[^a-zA-Z0-9\\s]")},n=new RegExp("[#@&\\$]","gi"),r=new RegExp("[,\\.\\/(\\[\\{\\}\\])|\\-_\\*\\^:;\\|—¯]","g"),a=e=>e.join(""),o=(n,o)=>{const{cleanedMask:c}=o;return((t,n)=>{const o=new RegExp(`${r.source}*ø.*`,"g"),c=[...t].reduce((e,t)=>e.replace("ø",t),a(n.blindedMask)),s=e(c,o),{cleanedMask:l,originalMask:u}=n;return{cleanedMask:l,output:s,completed:s.length===u.length}})([...n].reduce((e,n,r,a)=>{const o=t[c[r]];return t[c[r+1]]&&o||a.splice(0),o&&o.test(n)?e+n:e},""),o)},c=t=>{const n=a(t);return e(n,r)},s=t=>{const a=e(t,r),o=a.match(n)||"";if(a.length!==o.length)throw new Error("The mask has some invalid pattern character.");return o},l=e=>e.map(e=>e.match(n)?"ø":e),u=e=>(e=>e.sort((e,t)=>{if(c(e.originalMask)===c(t.originalMask))throw new Error("Two or more masks have the same amount of input characters. You must correct it.");return e.cleanedMask.length-t.cleanedMask.length}))((Array.isArray(e)?e:[e]).map(e=>(e=>{const t=[...e];return{originalMask:t,cleanedMask:s(e),blindedMask:l(t)}})(e))),i=t=>e(t.output,r).length,p=()=>null,d=({input:t,pattern:n,onSuccess:a=p,onError:c=p,validation:s=p})=>{const l=u(n),d=e(t,r),g=(e=>e.sort((e,t)=>i(t)-i(e)).filter((e,t,n)=>i(e)===i(n[0])).filter((e,t,n)=>n.some(e=>e.completed)?e.completed:e).reduce((e,t)=>e.cleanedMask.length<t.cleanedMask.length?e:t))(l.map(e=>o(d,e))),{completed:h,output:m}=g,k=s(m);if(!1===k)c();else{(h?a:c)()}return{input:t,output:m,completed:h,isValid:k}};export default function mdg({pattern:e,onError:t,onSuccess:n,validation:r}){const a={pattern:e,onError:t,onSuccess:n,validation:r},o=e=>d({input:e,...a}),c={...a,checkValue:o,checkField:(e,t="input")=>{e.addEventListener(t,e=>{const t=e.target;t.value=o(t.value).output})}};return Object.freeze(c),c}
